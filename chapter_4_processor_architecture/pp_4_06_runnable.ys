# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp      # Set up stack pointer
    call main               # Execute main program
    halt                    # Terminate program

# Array of 4 elements
    .align 8
array:
    .quad 0xFFFFFFFFFFFFFFFF    # -1
    .quad 0x0000000000000001    # 1
    .quad 0xFFFFFFFFFFFFFFFE    # -2
    .quad 0x0000000000000002    # 2
    .quad 0xFFFFFFFFFFFFFFFD    # -3
    .quad 0x0000000000000004    # 4

main:
    irmovq array,%rdi
    irmovq $6,%rsi
    call sum                # sum(array, 6)
    ret

# long absSum(long * start, long count)
# start in %rdi, count in %rsi
sum:
    irmovq	$8, %r8		    # Constant 8
    irmovq	$1, %r9		    # Constant 1
    xorq	%rax, %rax	    # sum = 0
    andq	%rsi, %rsi	    # Set CC
    jmp	    test		    # Go to test

loop:
    xorq	%r11, %r11	    # Constant 0
    mrmovq	(%rdi), %r10	# Get *start
    subq    %r10, %r11      # 0-x
    cmovg   %r11, %r10      # Move if -x > 0
    addq    %r10,%rax	    # Add to sum
    addq	%r8,%rdi	    # start++
    subq	%r9,%rsi	    # count-- & Set CC

test:
    jne	loop		        # Stop when 0
    ret			            # Return


# Stack starts here and grows to lower addresses
    .pos 0x200
stack:

